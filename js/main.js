import { saveData, getData, addTransaction } from "./firebase.js";
import { readNumber } from "./readMoney.js";

const LOCAL_STORAGE_KEY = "05cc84930bb8437e796b83764335703de333b844e9774e32f627215a973a5de5";

// üîπ Danh s√°ch h≈© t√†i ch√≠nh m·∫∑c ƒë·ªãnh
const jars = {
  essential: { id: "essential", name: "Thi·∫øt y·∫øu", percentage: 55, amount: 0 },
  savings: { id: "savings", name: "Ti·∫øt ki·ªám", percentage: 10, amount: 0 },
  education: { id: "education", name: "Gi√°o d·ª•c", percentage: 10, amount: 0 },
  investment: { id: "investment", name: "ƒê·∫ßu t∆∞", percentage: 10, amount: 0 },
  enjoyment: { id: "enjoyment", name: "H∆∞·ªüng th·ª•", percentage: 10, amount: 0 },
  charity: { id: "charity", name: "T·ª´ thi·ªán", percentage: 5, amount: 0 }
};

// Hi·ªÉn th·ªã GIF v√† ch·ªâ g·ªçi callback sau 3 gi√¢y
function showTransactionGif(type, callback) {
  const gifContainer = document.getElementById("transactionGifContainer");
  const gifImage = document.getElementById("transactionGif");

  if (type === "deposit") {
    gifImage.src = "../assets/img/in-jar.gif"; // ·∫¢nh GIF khi n·∫°p ti·ªÅn
  } else {
    gifImage.src = "../assets/img/out-jar.gif"; // ·∫¢nh GIF khi r√∫t ti·ªÅn
  }

  gifContainer.style.display = "flex"; // Hi·ªÉn th·ªã ·∫£nh GIF

  setTimeout(() => {
    gifContainer.style.display = "none"; // ·∫®n GIF sau 3 gi√¢y
    if (callback) callback(); // G·ªçi h·ªôp tho·∫°i sau khi GIF bi·∫øn m·∫•t
  }, 4000);
}


// üîπ Hi·ªÉn th·ªã Dialog Message
function showDialog(message) {
  document.getElementById("dialogMessage").innerHTML = message;
  document.getElementById("messageDialog").showModal();
}

// üîπ Hi·ªÉn th·ªã Dialog X√°c Nh·∫≠n v·ªõi √¥ nh·∫≠p l√Ω do n·∫øu c·∫ßn
function showConfirmDialog(message, callback, requireReason = false) {
  const confirmDialog = document.getElementById("confirmDialog");
  document.getElementById("confirmMessage").innerHTML = message;

  let reasonInputHTML = requireReason
    ? `<label for="confirmReason">L√Ω do:</label>
       <input type="text" id="confirmReason" placeholder="Nh·∫≠p l√Ω do" required>`
    : "";

  document.getElementById("confirmExtra").innerHTML = reasonInputHTML;

  confirmDialog.showModal();

  document.getElementById("confirmYes").onclick = function () {
    let reason = requireReason ? document.getElementById("confirmReason").value.trim() : "";

    if (requireReason && !reason) {
      showDialog("‚ö†Ô∏è Vui l√≤ng nh·∫≠p l√Ω do r√∫t ti·ªÅn!");
      return;
    }

    confirmDialog.close();
    callback(reason);
  };

  document.getElementById("confirmNo").onclick = function () {
    confirmDialog.close();
  };
}


// üîπ Hi·ªÉn th·ªã Dialog X√°c Nh·∫≠n
// function showConfirmDialog(message, callback) {
//   const confirmDialog = document.getElementById("confirmDialog");
//   document.getElementById("confirmMessage").innerHTML = message;

//   confirmDialog.showModal();

//   // N·∫øu x√°c nh·∫≠n, th·ª±c hi·ªán callback (n·∫°p/r√∫t ti·ªÅn)
//   document.getElementById("confirmYes").onclick = function () {
//     confirmDialog.close();
//     callback();
//   };

//   // N·∫øu h·ªßy, ƒë√≥ng h·ªôp tho·∫°i
//   document.getElementById("confirmNo").onclick = function () {
//     confirmDialog.close();
//   };
// }

// üîπ L·∫•y d·ªØ li·ªáu t·ª´ Firebase khi t·∫£i trang
async function loadJars() {
  const jarsData = await getData("jar-money");
  if (jarsData) {
    for (let key in jars) {
      if (jarsData[key]) {
        jars[key].amount = jarsData[key].amount || 0;
      }
    }
  }
  updateUI();
}

// üîπ Hi·ªÉn th·ªã l·ªãch s·ª≠ giao d·ªãch t·ª´ Firebase
async function loadTransactions() {
  const transactions = await getData("transactions"); // L·∫•y d·ªØ li·ªáu t·ª´ Firebase

  // Ki·ªÉm tra xem ph·∫ßn t·ª≠ b·∫£ng c√≥ t·ªìn t·∫°i kh√¥ng
  const historyTable = document.getElementById("transactionHistory");
  if (!historyTable) {
    console.error("Kh√¥ng t√¨m th·∫•y b·∫£ng l·ªãch s·ª≠ giao d·ªãch! Ki·ªÉm tra ID trong HTML.");
    return;
  }

  let tbody = historyTable.getElementsByTagName("tbody")[0];

  // N·∫øu tbody kh√¥ng t·ªìn t·∫°i, t·∫°o n√≥
  if (!tbody) {
    tbody = document.createElement("tbody");
    historyTable.appendChild(tbody);
  }

  tbody.innerHTML = ""; // X√≥a n·ªôi dung c≈© tr∆∞·ªõc khi t·∫£i m·ªõi

  if (transactions) {
    Object.values(transactions).forEach(trx => {
      let row = document.createElement("tr");
      row.className = trx.type === "N·∫°p ti·ªÅn" ? "deposit" : "withdraw";
      row.innerHTML = `
        <td>${trx.type}</td>
        <td>${trx.jar}</td>
        <td>${trx.amount.toLocaleString()} VND</td>
        <td>${trx.time}</td>
        <td>${trx.reason ? trx.reason : "Kh√¥ng c√≥ l√Ω do"}</td>
        <td>${trx.balanceAfter ? trx.balanceAfter.toLocaleString() + " VND" : "‚Äî"}</td>
      `;
      tbody.appendChild(row);
    });
  }
}



// üîπ C·∫≠p nh·∫≠t giao di·ªán UI
function updateUI() {
  const container = document.getElementById("jars-container");
  const totalMoneyElement = document.getElementById("total-money");
  container.innerHTML = "";

  let totalMoney = 0;

  for (let key in jars) {
    totalMoney += jars[key].amount;

    let jarElement = document.createElement("div");
    jarElement.className = "jar";
    jarElement.innerHTML = `
    <div class="card wallet">
      <div class="overlay"></div>
      <div class="circle">
        <img src="./assets/img/jar-icon/${jars[key].id}.png" alt="" srcset="">
      </div>
      <p>${jars[key].name}  ${jars[key].percentage}%</p> 

      <strong class="amount">${jars[key].amount.toLocaleString()} VND</strong>
    </div>
    `
    container.appendChild(jarElement);
  }

  totalMoneyElement.textContent = totalMoney.toLocaleString();
}

// üîπ X√°c nh·∫≠n & N·∫°p ti·ªÅn v√†o c√°c h≈©
async function confirmNapTien() {
  const money = parseInt(document.getElementById("addAmount").value);
  const jarKey = document.getElementById("jarSelectAdd").value;

  if (money > 0) {
    showConfirmDialog(
      `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën n·∫°p ${money.toLocaleString()} VND ${jarKey === "all" ? "v√†o t·∫•t c·∫£ c√°c h≈©" : `v√†o h≈© ${jars[jarKey].name}`} kh√¥ng?<br>
       B·∫±ng ch·ªØ: <b style="color: red">${readNumber(money)}</b>`,
      async function (reason) {
        if (jarKey === "all") {
          // N·∫°p theo t·ª∑ l·ªá
          for (let key in jars) {
            jars[key].amount += (money * jars[key].percentage) / 100;
            await saveData(`jar-money/${key}/amount`, jars[key].amount);
          }
          await addTransaction("N·∫°p ti·ªÅn", "T·∫•t c·∫£", money, reason, getTotalBalance());
        } else {
          // N·∫°p v√†o 1 h≈© c·ª• th·ªÉ
          jars[jarKey].amount += money;
          await saveData(`jar-money/${jarKey}/amount`, jars[jarKey].amount);
          await addTransaction("N·∫°p ti·ªÅn", jars[jarKey].name, money, reason, getTotalBalance());
        }

        updateUI();
        loadTransactions();

        showTransactionGif("deposit", () => {
          showDialog(`‚úÖ ƒê√£ n·∫°p ${money.toLocaleString()} VND ${jarKey === "all" ? "v√†o c√°c h≈©" : `v√†o h≈© ${jars[jarKey].name}`}<br>L√Ω do: ${reason}`);
        });
      },
      true // y√™u c·∫ßu nh·∫≠p l√Ω do
    );
  } else {
    showDialog("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá!");
  }
}



// üîπ X√°c nh·∫≠n & R√∫t ti·ªÅn t·ª´ m·ªôt h≈© c·ª• th·ªÉ
async function confirmRutTien() {
  let money = parseInt(document.getElementById("withdrawAmount").value);
  let jarKey = document.getElementById("jarSelect").value;

  if (money > 0) {
    if (jarKey === "all") {
      // üëâ R√∫t t·ª´ t·∫•t c·∫£ c√°c h≈© (nh∆∞ ph·∫ßn ƒë√£ vi·∫øt tr∆∞·ªõc)
      let canWithdraw = true;
      let requiredMoney = {};

      for (let key in jars) {
        requiredMoney[key] = (money * jars[key].percentage) / 100;
        if (jars[key].amount < requiredMoney[key]) {
          canWithdraw = false;
          break;
        }
      }

      if (!canWithdraw) {
        showDialog(`‚ùå M·ªôt trong c√°c h≈© kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ r√∫t!`);
        return;
      }

      showConfirmDialog(
        `B·∫°n c√≥ ch·∫Øc mu·ªën r√∫t ${money.toLocaleString()} VND t·ª´ t·∫•t c·∫£ c√°c h≈© kh√¥ng?<br>B·∫±ng ch·ªØ: <b style="color:red">${readNumber(money)}</b>`,
        async function (reason) {
          for (let key in jars) {
            await withdrawFromSingleJar(key, requiredMoney[key], reason);
          }
        },
        true
      );
    } else {
      // üëâ R√∫t t·ª´ 1 h≈© c·ª• th·ªÉ ‚Äì g·ªçi h√†m m·ªõi
      if (jars[jarKey].amount >= money) {
        showConfirmDialog(
          `B·∫°n c√≥ ch·∫Øc mu·ªën r√∫t ${money.toLocaleString()} VND t·ª´ h≈© ${jars[jarKey].name} kh√¥ng?<br>B·∫±ng ch·ªØ: <b style="color:red">${readNumber(money)}</b>`,
          async function (reason) {
            await withdrawFromSingleJar(jarKey, money, reason);
          },
          true
        );
      } else {
        showDialog(`‚ùå H≈© ${jars[jarKey].name} kh√¥ng ƒë·ªß ti·ªÅn!`);
      }
    }
  } else {
    showDialog("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá!");
  }
}

async function withdrawFromSingleJar(jarKey, amount, reason) {
  jars[jarKey].amount -= amount;
  await saveData(`jar-money/${jarKey}/amount`, jars[jarKey].amount);
  // await addTransaction("R√∫t ti·ªÅn", jars[jarKey].name, amount, reason);
  await addTransaction("R√∫t ti·ªÅn", jars[jarKey].name, amount, reason, getTotalBalance());


  updateUI();
  loadTransactions();

  showTransactionGif("withdraw", () => {
    showDialog(`‚úÖ ƒê√£ r√∫t ${amount.toLocaleString()} VND t·ª´ h≈© ${jars[jarKey].name}<br>L√Ω do: ${reason}`);
  });
}

function getTotalBalance() {
  return Object.values(jars).reduce((sum, jar) => sum + jar.amount, 0);
}

// üîπ Load d·ªØ li·ªáu khi trang t·∫£i
window.onload = async function () {
  await loadJars();
  await loadTransactions();

  document.getElementById("btnNapTien").addEventListener("click", confirmNapTien);
  document.getElementById("btnRutTien").addEventListener("click", confirmRutTien);
  document.getElementById("closeDialog").addEventListener("click", () => {
    document.getElementById("messageDialog").close();
  });
};

export { confirmNapTien, confirmRutTien };

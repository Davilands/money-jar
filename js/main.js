import { saveData, getData, addTransaction } from "./firebase.js";
import { readNumber } from "./readMoney.js";

// üîπ Danh s√°ch h≈© t√†i ch√≠nh m·∫∑c ƒë·ªãnh
const jars = {
  essential: { name: "Thi·∫øt y·∫øu", percentage: 55, amount: 0 },
  savings: { name: "Ti·∫øt ki·ªám", percentage: 10, amount: 0 },
  education: { name: "Gi√°o d·ª•c", percentage: 10, amount: 0 },
  investment: { name: "ƒê·∫ßu t∆∞", percentage: 10, amount: 0 },
  enjoyment: { name: "H∆∞·ªüng th·ª•", percentage: 10, amount: 0 },
  charity: { name: "T·ª´ thi·ªán", percentage: 5, amount: 0 }
};

// üîπ Hi·ªÉn th·ªã Dialog Message
function showDialog(message) {
  document.getElementById("dialogMessage").innerText = message;
  document.getElementById("messageDialog").showModal();
}

// üîπ Hi·ªÉn th·ªã Dialog X√°c Nh·∫≠n
function showConfirmDialog(message, callback) {
  const confirmDialog = document.getElementById("confirmDialog");
  document.getElementById("confirmMessage").innerHTML = message;

  confirmDialog.showModal();

  // N·∫øu x√°c nh·∫≠n, th·ª±c hi·ªán callback (n·∫°p/r√∫t ti·ªÅn)
  document.getElementById("confirmYes").onclick = function () {
    confirmDialog.close();
    callback();
  };

  // N·∫øu h·ªßy, ƒë√≥ng h·ªôp tho·∫°i
  document.getElementById("confirmNo").onclick = function () {
    confirmDialog.close();
  };
}

// üîπ L·∫•y d·ªØ li·ªáu t·ª´ Firebase khi t·∫£i trang
async function loadJars() {
  const jarsData = await getData("jar-money");
  if (jarsData) {
    for (let key in jars) {
      if (jarsData[key]) {
        jars[key].amount = jarsData[key].amount || 0;
      }
    }
  }
  updateUI();
}

// üîπ Hi·ªÉn th·ªã l·ªãch s·ª≠ giao d·ªãch t·ª´ Firebase
async function loadTransactions() {
  const transactions = await getData("transactions");
  const historyTable = document.getElementById("transactionHistory");
  historyTable.innerHTML = "";

  if (transactions) {
    Object.values(transactions).forEach(trx => {
      let row = document.createElement("tr");
      row.className = trx.type === "N·∫°p ti·ªÅn" ? "deposit" : "withdraw";
      row.innerHTML = `
                <td>${trx.type}</td>
                <td>${trx.jar}</td>
                <td>${trx.amount.toLocaleString()} VND</td>
                <td>${trx.time}</td>
            `;
      historyTable.appendChild(row);
    });
  }
}

// üîπ C·∫≠p nh·∫≠t giao di·ªán UI
function updateUI() {
  const container = document.getElementById("jars-container");
  const totalMoneyElement = document.getElementById("total-money");
  container.innerHTML = "";

  let totalMoney = 0;

  for (let key in jars) {
    totalMoney += jars[key].amount;

    let jarElement = document.createElement("div");
    jarElement.className = "jar";
    jarElement.innerHTML = `
            <h2>${jars[key].name} (${jars[key].percentage}%)</h2>
            <p class="amount">${jars[key].amount.toLocaleString()} VND</p>
        `;
    container.appendChild(jarElement);
  }

  totalMoneyElement.textContent = totalMoney.toLocaleString();
}

// üîπ X√°c nh·∫≠n & N·∫°p ti·ªÅn v√†o c√°c h≈©
function confirmNapTien() {
  let money = parseInt(document.getElementById("totalAmount").value);
  if (money > 0) {
    showConfirmDialog(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën n·∫°p ${money.toLocaleString()} VND v√†o c√°c h≈© kh√¥ng?<br>b·∫±ng ch·ªØ: <b style="color: red">${readNumber(money)}</b> `, async function () {
      for (let key in jars) {
        jars[key].amount += (money * jars[key].percentage) / 100;
        await saveData(`jar-money/${key}/amount`, jars[key].amount);
      }
      await addTransaction("N·∫°p ti·ªÅn", "T·∫•t c·∫£", money);
      updateUI();
      loadTransactions();
      showDialog(`‚úÖ ƒê√£ n·∫°p ${money.toLocaleString()} VND v√†o c√°c h≈©`);
    });
  } else {
    showDialog("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá!");
  }
}

// üîπ X√°c nh·∫≠n & R√∫t ti·ªÅn t·ª´ m·ªôt h≈© c·ª• th·ªÉ
function confirmRutTien() {
  let money = parseInt(document.getElementById("withdrawAmount").value);
  let jarKey = document.getElementById("jarSelect").value;

  if (money > 0 && jars[jarKey].amount >= money) {
    showConfirmDialog(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën r√∫t ${money.toLocaleString()} VND t·ª´ h≈© ${jars[jarKey].name} kh√¥ng?<br>B·∫±ng ch·ªØ: <b style="color: red">${readNumber(money)}</b>`, async function () {
      jars[jarKey].amount -= money;
      await saveData(`jar-money/${jarKey}/amount`, jars[jarKey].amount);
      await addTransaction("R√∫t ti·ªÅn", jars[jarKey].name, money);
      updateUI();
      loadTransactions();
      showDialog(`‚úÖ ƒê√£ r√∫t ${money.toLocaleString()} VND t·ª´ h≈© ${jars[jarKey].name}`);
    });
  } else {
    showDialog(`‚ùå H≈© ${jars[jarKey].name} kh√¥ng ƒë·ªß ti·ªÅn!`);
  }
}

// üîπ Load d·ªØ li·ªáu khi trang t·∫£i
window.onload = async function () {
  await loadJars();
  await loadTransactions();

  document.getElementById("btnNapTien").addEventListener("click", confirmNapTien);
  document.getElementById("btnRutTien").addEventListener("click", confirmRutTien);
  document.getElementById("closeDialog").addEventListener("click", () => {
    document.getElementById("messageDialog").close();
  });
};

export { confirmNapTien, confirmRutTien };
